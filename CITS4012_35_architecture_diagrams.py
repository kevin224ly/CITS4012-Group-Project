
"""Generate architecture diagrams for CITS4012 models.

This script purposely lives outside the notebook so that the final
submission notebook stays clean. Running the script will create PNG files
for the three model diagrams (Model A, B, C) under the current directory.
Author: (auto-generated by Codex)
"""

from pathlib import Path

import graphviz

OUTPUT_DIR = Path('diagrams')
OUTPUT_DIR.mkdir(exist_ok=True)


def render_graph(dot: graphviz.Digraph, filename: str) -> None:
    path = OUTPUT_DIR / filename
    dot.render(path.as_posix(), format='png', cleanup=True)
    print(f"Saved {path.with_suffix('.png')}")


def model_a_diagram() -> None:
    dot = graphviz.Digraph('ModelA', format='png')
    dot.attr(rankdir='LR', splines='spline', concentrate='true')
    dot.attr('node', shape='box', style='filled', color='#f0f0ff', fontsize='12')

    dot.node('Emb', 'Word2Vec Embeddings\n(trainable)', fillcolor='#d9e4ff')
    dot.node('BiLSTM_P', 'Premise BiLSTM', fillcolor='#ffd9d9')
    dot.node('BiLSTM_H', 'Hypothesis BiLSTM', fillcolor='#ffd9d9')
    dot.node('CrossAttn', 'Bilinear\nCross-Attention', fillcolor='#ffe6cc')
    dot.node('Inter', 'Interaction features\n[concat, diff, prod]', fillcolor='#fff2cc')
    dot.node('Pool', 'Pooling\n(max + mean)', fillcolor='#fff2cc')
    dot.node('Classifier', 'MLP Classifier', fillcolor='#d9ead3')

    dot.edge('Emb', 'BiLSTM_P', label='premise ids')
    dot.edge('Emb', 'BiLSTM_H', label='hypothesis ids')
    dot.edge('BiLSTM_P', 'CrossAttn')
    dot.edge('BiLSTM_H', 'CrossAttn')
    dot.edge('CrossAttn', 'Inter')
    dot.edge('Inter', 'Pool')
    dot.edge('Pool', 'Classifier')

    render_graph(dot, 'modelA_architecture')


def model_b_diagram() -> None:
    dot = graphviz.Digraph('ModelB', format='png')
    dot.attr(rankdir='LR', splines='spline', concentrate='true')
    dot.attr('node', shape='box', style='filled', fontsize='12')

    dot.node('Emb', 'Trainable Embeddings', fillcolor='#d9e4ff')
    dot.node('SharedGRU', 'Shared BiGRU Encoder', fillcolor='#ffd9d9')
    dot.node('Align', 'Soft Alignment\n(attention)', fillcolor='#ffe6cc')
    dot.node('Inference', 'Local Inference\nEnhancement', fillcolor='#fff2cc')
    dot.node('CompGRU', 'Inference Composition\nBiGRU', fillcolor='#ffd9d9')
    dot.node('Pooling', 'Max+Avg Pooling', fillcolor='#fff2cc')
    dot.node('Classifier', 'MLP Classifier', fillcolor='#d9ead3')

    dot.edge('Emb', 'SharedGRU', label='premise/hypothesis ids')
    dot.edge('SharedGRU', 'Align')
    dot.edge('Align', 'Inference')
    dot.edge('Inference', 'CompGRU')
    dot.edge('CompGRU', 'Pooling')
    dot.edge('Pooling', 'Classifier')

    render_graph(dot, 'modelB_architecture')


def model_c_diagram() -> None:
    dot = graphviz.Digraph('ModelC', format='png')
    dot.attr(rankdir='LR', splines='ortho', concentrate='true')
    dot.attr('node', shape='box', style='filled', fontsize='12')

    dot.node('TokenEmb', 'Token Embedding', fillcolor='#d9e4ff')
    dot.node('SegmentEmb', 'Segment Embedding', fillcolor='#d9e4ff')
    dot.node('PosEmb', 'Position Embedding', fillcolor='#d9e4ff')
    dot.node('Sum', 'Sum + LayerNorm', fillcolor='#fff2cc')
    dot.node('Encoder', '3-layer Transformer\nEncoder (MHSA+FFN)', fillcolor='#ffd9d9')
    dot.node('CLS', '[CLS] pooled', fillcolor='#ffe6cc')
    dot.node('Classifier', 'MLP Classifier', fillcolor='#d9ead3')

    dot.edge('TokenEmb', 'Sum')
    dot.edge('SegmentEmb', 'Sum')
    dot.edge('PosEmb', 'Sum')
    dot.edge('Sum', 'Encoder')
    dot.edge('Encoder', 'CLS', label='[CLS] state')
    dot.edge('CLS', 'Classifier')

    render_graph(dot, 'modelC_architecture')


def main():
    model_a_diagram()
    model_b_diagram()
    model_c_diagram()


if __name__ == '__main__':
    main()
